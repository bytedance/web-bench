-
  id: init
  date: 20250324
  level: easy
  description: |
    Create a file at types/setter.ts that exports the following interfaces:
      1. InputSetter:  has type 'input' and string value.
      2. NumberSetter: has type 'number' and number value.
      3. CheckboxSetter: has type 'checkbox' and boolean value.
      4. Setter: includes all the above types.
    

-
  id: task-1
  date: 20250327
  level: easy
  description: |
    InputSetter、NumberSetter、CheckboxSetter add optional type onChange. onChange is a function type, parameter is the value of the corresponding type and may be undefined,  return type is void.

-
  id: task-2
  date: 20250327
  level: easy
  description: |
    Create a file at types/setter-check.ts that exports the function isInputSetter to check the Setter is InputSetter.

-
  id: task-3
  date: 20250327
  level: easy
  description: |
    1. Export interface `BaseSetter`, has `value` and `onChange`, onChange is a function type, parameter is the value of the corresponding type and may be undefined,  return type is void.
    2. BaseSetter all types are required.
    3. Export type OptionalBaseSetter, has the same type of BaseSetter, but all types are optional.
    4. InputSetter、NumberSetter、CheckboxSetter extends OptionalBaseSetter.

-
  id: task-4
  date: 20250331
  level: easy
  description: |
    In types/setter.ts:
      1. Export type `SetterValueType` that includes primitive string, number, boolean, array, object. Array and Object are strictly of type SetterValueType.
      2. The BaseSetter's value is strictly of type SetterValueType.

-
  id: task-5
  level: easy
  date: 20250331
  description: |
    In types/setter.ts create and export a type `ValueSetter`, Dynamically create supported Setter types according to the provided generic type.

-
  id: task-6
  date: 20250331
  level: moderate
  description: |
    In types/setter.ts: create and export Setter `PasswordSetter` type 'password' and value type string.

-
  id: task-7
  date: 20250331
  level: moderate
  description: |
    In types/setter.ts: create and export Setter `SelectSetter` type 'select' and value could be string or number.


-
  id: task-8
  date: 20250331
  level: challenging
  description: |
    In types/setter.ts, create and export Setter `ArraySetter`:
      - type 'array'
      - item: dynamically create supported Setter types according to the value item.

-
  id: task-9
  date: 20250407
  level: challenging
  description: |
    In types/setter.ts, create and export Setter `TupleSetter`:
      - type: 'tuple'
      - items: each item is a Setter with the corresponding type in the tuple.

-
  id: task-10
  date: 20250331
  level: challenging
  description: |
    In types/setter.ts, create and export Setter `ObjectSetter`:
      - type 'object'
      - properties: dynamically create supported Setter types according to the value type

-
  id: task-11
  date: 20250401
  level: moderate
  description: |
    In types/setter.ts, create and export Setter `CustomSetter`:
      - type 'custom' and customType string
      - value implements generic ValueType 
    In ValueSetter, CustomSetter supports any type of value.

-
  id: task-12
  date: 20250401
  level: challenging
  description: |
    The Setter implements generic ValueType where:
      1. ArraySetter, ObjectSetter and CustomSetter inherit the ValueType from their parent Setter
      2. InputSetter maintains backward compatibility without ValueType constraints

-
  id: task-13
  date: 20250401
  level: moderate
  description: |
    Create a file at types/schema.ts that exports interface `FormSchema`:
      fields: dynamically create supported Setter types according to the form value type.

    In types/setter.ts, create and export interfaces:
      1. ExpressionEvent with generic SetterValue and FormValue:
        - value: generic type SetterValue
        - formValue: generic type FormValue, FormValue's constraints align with FormSchema.

      2. Expression with generic SetterValue, FormValue and ExpressionValue:
        - type: 'expression'
        - value: value is a function type, parameter is ExpressionEvent,  return type is generic type ExpressionValue.
      3. SetterMaybeExpression: Expression or generic type ExpressionValue
      
-
  id: task-14
  date: 20250402
  level: challenging
  description: |
      In BaseSetter, add optional prop `visible`
        - a SetterMaybeExpression with ExpressionValue constrained to boolean and FormValue depends on BaseSetter's FormValue.
      FormSchema needs to pass FormValue to the Setter to populate the visible property of BaseSetter, and omitting the Setter will not cause errors.

-
  id: task-15
  date: 20250402
  level: challenging
  description: |
      In types/setter.ts, create and export `CustomSetterRender`, has prop `render` which is a FC from React, props contain:
        - all props in generic type Props
        - value
        - onChange, onChange's param newValue could be empty and type depends on `value`
      Add a new prop customSetterRenderDefinitions to FormSchema:
        Type: A generic type CustomSetterRenderDef, which is an object type where keys are strings and values are of type CustomSetterRender.
        Requirement: The customSetterRenderDefinitions prop must include all CustomSetterRender definitions specified by the generic CustomSetterRenderDef.

-
  id: task-16
  date: 20250402
  level: challenging
  description: |
      CustomSetter needs to constrain the type of customType. In the fields of FormSchema, the customType must be included in the key of CustomSetterRenderDef.

-
  id: task-17
  date: 20250402
  level: challenging
  description: |
    Add a new optional prop `props` to CustomSetter:
      The type of `props` is determined by the parameters of CustomSetterRender corresponding to customType in CustomSetterRenderDef, and these parameters must omit the `value` and `onChange`.

-
  id: task-18
  date: 20250403
  level: challenging
  description: |
    Add a prop `ctxValue` to ExpressionEvent:
      - type CtxValue.
      - Only the item within an ArraySetter creates a ctxValue, whose type matches the array item's type. 
      - If not inside an ArraySetter, ctxValue defaults to the FormValue type.

-
  id: task-19
  date: 20250403
  level: moderate
  description: |
    Edit CustomSetter customType:
      customType can't be string with hyphen.

-
  id: task-20
  date: 20250407
  level: challenging
  description: |
    In types/schema.ts, create and export interface `EditorRef`:
      - setSetterValueByPath: 
        param1: path, an array of nested property keys on FormValue (type-restricted to valid nested paths of FormValue).
        param2: value, the value to set, whose type must match the nested property type inferred from path.
        return: void

