{"id":"task-1","date":"2024-11-01","level":"easy","description":"1) Create components/header/header.component.ts that displays 'Hello Blog' at the top of the page with appealing background color. 2) Create components/main/main.component.ts where content is aligned at the top left and fills the remaining space. 3) Develop components/blog/blog.component.ts that accepts 'title' and 'detail' as input properties. Display mock blog data in main.component.ts using this blog component with the mock data: { title: 'Morning', detail: 'Morning My Friends' }. 3) Include header.component.ts and main.component.ts in app.component.ts 4) The class of title in blog.component.ts is 'blog-title', the width of blog-title is 'fit-content', fontSize is 24px"}
{"id":"task-2","date":"2024-11-01","level":"easy","description":"1) Create a appealing blog-list component that accepts an array of blogs as input property and displays the titles in div elements with the class 'list-item'. 2) In main.component.ts, mock the blog data and display it using blog-list with this data: [{title: 'Morning', detail: 'Morning My Friends'}, {title: 'Travel', detail: 'I love traveling!'}]. 3) Position blog-list on the left side of main.component.ts with a width of 300px; each blog item should have a height of 40px and a border-box layout. 4) Only One blog.component.ts occupies the remaining space of main.component.ts. The content of blog.component.ts should be from first item of the mock data. 5) Angular Version is V19"}
{"id":"task-3","date":"2024-11-01","level":"easy","description":"1) Make blog items in blog-list selectable. When an item in blog-list is selected, highlight it with appealing style and display its content in the blog Component. 2) Set 'Morning' as the default selected blog. 3) Beautify the List without changing the size of List Item"}
{"id":"task-4","date":"2024-11-01","level":"easy","description":"1) Create a blog-form component as a appealing Modal with the title 'Create Blog'. 2) Add an 'Add Blog' appealing blue button in the right of header.component.ts to toggle the blog-form's visibility. 3) Place a close button (.close-btn) with 'x' in the top right of blog-form to hide it. 4) Place the blog-form component in app.component.ts."}
{"id":"task-5","date":"2024-11-01","level":"easy","description":"1) Add .visible-count in the top-left of blog-form showing '0' initially. 2) Increment .visible-count by 1 each time blog-form becomes visible."}
{"id":"task-6","date":"2024-11-01","level":"moderate","description":"1) Add appealing Form with label in blog-form to input title and detail; blog-form can be submitted by button (.submit-btn); Use Angular Forms module. 2) The labels in the Form all add the 'for' attribute, and the attribute values are 'title ' and 'detail' respectively. 3) When submitted, append this Blog to blog-list, and set this Blog as selected. Keep Previous MockData."}
{"id":"task-7","date":"2024-11-01","level":"moderate","description":" 1) Create services/blog.service.ts to manage related state (blog list and selected blog) in app.component.ts 2) When submit a new blog-form, check title duplication. Constraint: The duplication check code should be written in blog-form; 3) Add a span(.blog-list-len) near 'Hello Blog' in header.component.ts to show the length of blogs"}
{"id":"task-8","date":"2024-11-01","level":"moderate","description":"1) Add 'Delete' appealing red button (.delete-btn) in top&right of blog.component.ts. When clicked, delete selected Blog and select the first blog. 2) The logic of Delete is appended to a service blog.service.ts."}
{"id":"task-9","date":"2024-11-01","level":"moderate","description":"1) Add 'Edit' appealing blue button (.edit-btn) in top&right of blog.component.ts. When clicked, toggle blog-form to edit the content of selected Blog. The Title of blog-form is 'Edit Form' in this case. When submitted, update selected Blog. 2) The logic of Edit is appended to a service blog.service.ts; 3) Constraint: blog-form should be singleton, ONLY ONE instance of blog-form exists."}
{"id": "task-10","date":"2024-11-01","level":"moderate","description":"1) Add a search.component.ts (width: 200px, border-box) component above blog-list.component.ts in app.component.ts. 2) Include an input field with the placeholder 'Search Blogs'. The keywords in the input field are used to filter blogs."}
{"id":"task-11","date":"2024-11-01","level":"chanllenging","description":"1) Add a button with the text 'Random Blogs' in header to append 100,000 blogs to blog-list at one time. Each blog should have a title formatted in regex 'RandomBlog-[\\d]{12}', digits in title is random. 2) Ensure the page will not be stuck when 100000 blogs are appended. 3) Constraint: DO NOT USE any third-party packages, ONLY Angular APIs can be used to optimize performance."}
{"id":"task-12","date":"2024-11-01","level":"challenging","description":"1) Add appealing comments.component.ts with the title 'Comments' at the bottom of blog.component.ts. 2) Include a TextArea with the placeholder 'Enter Your Comment' and a submit button (.comment-btn) to submit the comment. 3) Only display comments related to the selected blog, showing them in cards with the class '.comment-item', placed above the TextArea. 4) Create services/comment.service.ts to implement state management without NgRx or other state management libraries, and connect CommentService to UI. 5) Preserve comments when a blog is edited, and clear them when a blog is deleted. 6) Constraint: DO NOT USE any third-party packages; ONLY utilize Angular APIs."}
{"id":"task-13", "date":"2024-11-01","level":"challenging", "description": "1) Create directives/tooltip.directive.ts that displays a tooltip (.tooltip) at the bottom of the host element when hovered over. 2) Implement this tooltip on the 'Add Blog' button to show 'Write a New Blog For everyone' when hovered. 3) The Tooltip should be appended to document.body using Angular's dynamic component creation. 4) Constraint: DO NOT use any third-party packages; ONLY Angular APIs are allowed."}
{"id":"task-14", "date":"2024-11-01","level":"challenging", "description": "1) Enable Markdown text input for blog details. Preview the Markdown in blog.component.ts. 2) Develop a pipe or service to reuse Markdown-related logic. 3) Prevent XSS attacks using Angular's DomSanitizer. 4) Constraint: DO NOT use any third-party packages; ONLY Angular APIs are permitted."}
{"id":"task-15", "date":"2024-11-01","level":"challenging", "description": "1) Create services/toast.service.ts to display a one-line message (fontSize: 12px) in a appealing green box at the top of the page for 2000ms. 2) Display a toast with 'New Comment Created Successfully!' when a new comment is submitted, and 'New Blog Created Successfully!' when a new blog is submitted. 3) If a toast is already visible when another is triggered, remove the old toast before showing the new one. 4) Constraint: DO NOT use any third-party packages; ONLY Angular APIs are permitted."}
{"id":"task-16", "date":"2024-11-01","level":"challenging", "description": "1) When the title of Blog is longer than 300px, show '...' to hide longer text. 2) Title can be hovered to show full content in Tooltip when Title is longer than 300px. DO NOT show Tooltip when Title is less than 300px 3) Make sure EVERY title displayed in the page follows the rules, create reusable directives. 4) Constraint: DO NOT use any third-party packages; ONLY Angular APIs are permitted."}
{"id":"task-17", "date":"2024-11-01","level":"challenging", "description": "1) Add appealing button in header with text 'Fast Comment'. 2) When clicked, focus Textarea in comments.component.ts and type 'Charming Blog!' DO NOT submit this comment. 3) Constraint: DO NOT use any third-party packages; ONLY Angular APIs are permitted. DO NOT use BOM API. Use ViewChild/ContentChild instead of DOM query."}
{"id":"task-18", "date":"2024-11-01","level":"challenging", "description": "1) Add pages/game/game.component.ts with text 'Hello Game'. 2) Move Previous Logic of app.component.ts to pages/blogPage/blogPage.component.ts 2) Add Route Logic: When browser location is '/', routed to BlogPage. When browser location is '/game', routed to Game. 3) Add a appealing button with text 'ðŸŽ®' in BlogPage's header.component.ts to navigate to Game page, and user can go back to BlogPage when browser page go Back. 4) Constraint: DO NOT use any third-party packages; ONLY Angular APIs are permitted."}
{"id":"task-19", "date":"2024-11-01","level":"challenging", "description": "1) Write a Gomoku chess game 2) chess board is 15*15, there is black chess and white chess, black chess first 3) Add the class for important element: white chess(.chess-white), black chess(.chess-black), position chess can be clicked to drop follow regex: .chess-pos-\\d{1,2}-d\\{1,2}. 4) show 'White's Turn' and 'Black'Turn' to show current player 5) show 'White Wins!' and 'Black Wins!' when player wins, reuse toast.service.ts to toast BIG 'Congratulations!' with style: 50px fontSize 6) keep 'Hello Game' 7) Beautify this game 8) Constraint: DO NOT use any third-party packages; ONLY Angular APIs are permitted."}
{"id":"task-20", "date":"2024-11-01","level":"challenging", "description": "1) When gamer wins, add a button with Text 'Post Game Records', when clicked, post a new blog to record the history of this game. Return to blog page and show this blog 2) The Blog Content Example: '# White is Winner!\n```game\nWhite(1,5);\nBlack(14,11);\nWhite(11,4);\n```' 3) Title of Blog follow Game-[Date]-[Time] 4) Constraint: DO NOT use any third-party packages; ONLY Angular APIs are permitted."}