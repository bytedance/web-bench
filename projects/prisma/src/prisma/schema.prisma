// Copyright (c) 2025 Bytedance Ltd. and/or its affiliates
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

datasource db {
  provider = "sqlite"
  url      = "file:../test.sqlite"
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

model User {
  id                   Int      @id @default(autoincrement())
  username             String   @unique
  password             String
  role                 String
  coin                 Int
  referralCode         String   @unique
  referredBy           String?
  isFirstPurchase      Boolean  @default(true)
  wishlistItems        WishlistItem[]
  cartItems            CartItem[]
  orders               Order[]
  productComments      ProductComment[]
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  price       Int
  image       String
  description String
  quantity    Int
  wishlistItems WishlistItem[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  productComments ProductComment[]
}

model WishlistItem {
  id        Int     @id @default(autoincrement())
  username  String
  productId Int
  user      User    @relation(fields: [username], references: [username], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([username, productId])
}

model CartItem {
  id        Int     @id @default(autoincrement())
  username  String
  productId Int
  quantity  Int
  user      User    @relation(fields: [username], references: [username], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([username, productId])
}

model Order {
  id            Int         @id @default(autoincrement())
  username      String
  status        String
  totalPrice    Int
  createdAt     DateTime    @default(now())
  user          User        @relation(fields: [username], references: [username], onDelete: Cascade)
  orderItems    OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductComment {
  id        Int      @id @default(autoincrement())
  username  String
  productId Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [username], references: [username], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([username, productId])
}