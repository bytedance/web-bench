{"id":"task-1","date":"2025-5-29","level":"easy","description":"Create a drawing canvas using SVG element with class 'canvas' that fills the available space with a light gray background (#eee). The canvas should be positioned within a flex container to expand and fill remaining space."}
{"id":"task-2","date":"2025-5-29","level":"easy","description":"Build a toolbar interface with three sections: shape tools (line, rect, ellipse), property controls (line-width slider and color picker), and operation tools (move, rotate, zoom, copy, delete, fill). Each tool should be a label containing a hidden radio input with name='operation'."}
{"id":"task-3","date":"2025-5-29","level":"medium","description":"Implement custom SVG icons for each tool button using data URIs in CSS. Icons should be 20x20 pixels and display as background images on labels. Add hover effects with semi-transparent backgrounds and highlight selected tools with darker background colors."}
{"id":"task-4","date":"2025-5-29","level":"medium","description":"Create a Canvas class that manages SVG drawing operations. It should accept a selector and Toolkit instance, bind mouse/touch events for drawing (start, move, end), and calculate cursor positions relative to the canvas for both mouse and touch inputs."}
{"id":"task-5","date":"2025-5-29","level":"medium","description":"Implement a Toolkit class that manages tool selection and properties. It should track the currently selected operation through radio inputs, provide access to line width (range 1-21, step 4, default 9) and color values, and emit 'operation-change' events when tools are switched."}
{"id":"task-6","date":"2025-5-29","level":"hard","description":"Add keyboard shortcut functionality where pressing and holding the spacebar temporarily switches to the move tool. When spacebar is released, return to the previously selected tool. Track the previous tool state and handle keydown/keyup events appropriately."}
{"id":"task-7","date":"2025-5-29","level":"medium","description":"Create a base Shape class with static shape registry and common methods. Include properties for element reference and center point, methods for move/rotate/zoom transformations, clone and remove functionality, and a static factory method to dynamically import and create shape instances."}
{"id":"task-8","date":"2025-5-29","level":"medium","description":"Implement Line shape class that creates SVG line elements. During creation, start with minimum length equal to line width, dynamically update endpoint based on cursor movement, maintain center point for transformations, and support cloning with offset positioning."}
{"id":"task-9","date":"2025-5-29","level":"medium","description":"Implement Rect shape class that creates SVG rect elements with white fill and colored stroke. Support dynamic resizing from origin point with minimum dimensions matching line width, calculate proper x/y coordinates for any drag direction, update center point and transform origin during creation."}
{"id":"task-10","date":"2025-5-29","level":"medium","description":"Implement Ellipse shape class that creates SVG ellipse elements. Start as a circle with radius based on line width, support asymmetric resizing to create ellipses, handle negative drag directions properly, maintain correct center point for transformations."}
{"id":"task-11","date":"2025-5-29","level":"hard","description":"Implement shape transformation system with translate, rotate, and scale operations. Parse existing CSS transforms, calculate rotation angles between cursor positions relative to shape center, compute scale factors based on distance ratios, and apply combined transformations maintaining proper order."}
{"id":"task-12","date":"2025-5-29","level":"medium","description":"Add move operation that allows dragging shapes around the canvas. Calculate position difference between current and initial cursor positions, update translate transform while preserving rotation and scale, ensure canvas elements cannot be moved (only shapes)."}
{"id":"task-13","date":"2025-5-29","level":"hard","description":"Implement rotate operation using mathematical calculations. Compute rotation angle between two vectors from shape center to cursor positions, handle edge cases like zero-length vectors, apply rotation in degrees while maintaining shape's transform origin at its center."}
{"id":"task-14","date":"2025-5-29","level":"hard","description":"Create zoom/scale operation that resizes shapes from their center. Calculate scale factor as ratio of distances from center to cursor positions, apply uniform scaling to both x and y axes, preserve existing transformations while updating scale values."}
{"id":"task-15","date":"2025-5-29","level":"medium","description":"Implement copy operation that duplicates selected shapes. Clone the shape with all attributes preserved, offset the copy by 20 pixels in both x and y directions, register the new shape in the shapes array, and insert it into the canvas."}
{"id":"task-16","date":"2025-5-29","level":"easy","description":"Add delete operation to remove shapes from canvas. Find shape instance by clicked element, remove from shapes registry array, remove SVG element from DOM, and prevent deletion of the canvas itself."}
{"id":"task-17","date":"2025-5-29","level":"easy","description":"Implement fill operation to change shape fill colors. Apply selected color to clicked shape's fill attribute, work only on shape elements (not canvas), and use the current color from the color picker input."}
{"id":"task-18","date":"2025-5-29","level":"medium","description":"Create custom cursor system that changes based on selected tool. Use CSS to apply tool-specific cursors to canvas children when different operations are selected, utilizing the same icon data URIs as tool buttons with appropriate hotspot positioning."}
{"id":"task-19","date":"2025-5-29","level":"medium","description":"Implement automatic tool switching after shape creation or copy operations. Listen for 'done' events from canvas, check if completed operation is in whitelist (shape creation or copy), automatically switch to move tool for immediate manipulation of created shapes."}
{"id":"task-20","date":"2025-5-29","level":"hard","description":"Add comprehensive event handling system with EventEmitter pattern. Support on, off, once, and emit methods for custom events, maintain event listener registry with proper cleanup, enable communication between Canvas and Toolkit components through events."}
