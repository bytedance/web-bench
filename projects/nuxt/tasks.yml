- id: task-1
  date: 2024-11-29
  level: easy
  description: |
    1) Create home page (pages/index.vue) with route '/' showing 'üõçÔ∏èüõçÔ∏èüõçÔ∏è Welcome to Shopping Mart !' in h1 tag
    2) Create login page (pages/login.vue) at route '/login' showing 'üí° Please Login First' in h1 tag

- id: task-2
  date: 2024-11-29
  level: easy
  description: |
    1) Every page in this app will have a appealing header showing 'üõçÔ∏è WebBench Shopping Mart', and a beautiful footer showing 'Copyright: Web Bench'
    2) Add class 'site-header' to header and 'site-footer' to footer
    3) Create layouts/default.vue to implement this feature
    4) Header is fixed at the page top; footer is fixed at the page bottom; main(children) occupies the remaining space
    5) Add style section in layouts/default.vue to implement the layout CSS

- id: task-3
  date: 2024-11-29
  level: easy
  description: |
    1) If Page Not Found, shows 'Oops! Looks like you have wandered off the beaten path.' in h1 tag
    2) Add button(.not-found-go-to-home) to navigate to '/'
    3) When click 'üõçÔ∏è WebBench Shopping Mart' in header, navigate to '/'
    4) Add Style to beautify UI
    5) 404 Page share the same layout with other pages
    6) Hint: error.vue in the root dir can handle 404, NuxtLayout can be used to implement layout in error page

- id: task-4
  date: 2024-11-29
  level: easy
  description: |
    1) Create libs/db.ts to export a new sqlite3.Database(process.env.DB_HOST!) by node-sqlite3
    2) Add libs/setup.sql to create tables for products (id, name, price, image, description, quantity)
    3) POST /api/products to insert product data (Request Body follow {'name': 'SKU', 'price': 1234, image: 'xxx', description: 'xxx', quantity: 100})
    4) Return { success: true, data: {'id': 'xxxx' } } when inserted successfully
    5) GET /api/products to fetch all products
    6) Return { success: true, products: [{'id':'xxx', 'name': 'SKU', 'price': 1234, image: 'xxx', description: 'xxx', quantity: 100}] } when fetched successfully

- id: task-5
  date: 2024-11-29
  level: easy
  description: |
    1) Add page with path '/products' to display all products (image, name, price)
    2) UI Structure For Product Cards: <div className='product-card' id='product_card_{{id}}'><img className='product-image' src={{image}}/><div className='product-name'>{{name}}</div><div className='product-price'>{{price}}</div></div>
    3) Add a button (.home-go-products-link) in home page to navigate to '/products'
    4) .product-card is wrapped in .product-list
    5) Add Style to beautify UI

- id: task-6
  date: 2024-11-29
  level: moderate
  description: |
    1) Add product detail page with path '/products/:product_id'
    2) Add classNames for UI: .product-card, .product-image, .product-name, .product-price, .product_quantity, .product-description
    3) In /products page, When .product-card clicked, goto related product detail page
    4) Add Style to beautify UI
    5) If Not Found, show 'Product Not Found'

- id: task-7
  date: 2024-11-29
  level: moderate
  description: |
    1) Create User Table, setup User Table with two initial users:
       - username: admin, password: 123456, role: admin, coin: 0
       - username: user, password: 123456, role: user, coin: 1000
    2) POST /api/auth to login into system with example payload {username: 'xxx', password: 'xxx'} and example response { success: true }
    3) GET /api/auth to get the full information of current user, example response {'username': 'xxx', 'role': 'xxx', 'coin': xxx}, if not login, return 401 status
    4) Use 'jose' to generate JWT in cookie by key: 'TOKEN', the payload of JWT follow example{'username': 'xxx', 'role': 'xxx'}, secret is 'WEBBENCH-SECRET', use default HS256 algorithm and expired in 1 hour

- id: task-8
  date: 2024-11-29
  level: moderate
  description: |
    1) Create login form (.login-form) with username input (.username), password input (.password), and submit button (.login-btn)
    2) On successful login redirect to home page showing 'Hello {username}!'(h1), on failed login show 'Login Failed' message
    3) The username in home page should be rendered in Server Side, create a new Server Route (server/api/auth.ts) to get current auth
    4) Add Style to beautify UI

- id: task-9
  date: 2024-11-29
  level: moderate
  description: |
    1) Create register page with route '/register' with form (.register-form) containing:
       - username (input.username)
       - password (input.password)
       - confirm password input (input.confirm-password)
       - submit button (.register-button)
    2) Show error messages in .error-message div for validation failures, error text is:
       - 'Passwords must match'
       - 'Username already exists'
    3) Redirect to home page and auto login when register successful
    4) Add .login-link, clicked to /login
    5) Add a .register-link in /login page, clicked to /register
    6) Add Server Route to handle register form submission, the initial coin for new user is 1000
    7) Add Style to beautify UI

- id: task-10
  date: 2024-11-29
  level: moderate
  description: |
    1) Render STATIC page /profile/:username to display the user profile with UI:
       - h1.profile-username
       - .profile-coin
    2) Users can only visit their own profile, and Admins can visit the profiles of all people
    3) If the privilege is violated, redirect to the /login page
    4) If User not found, shows User not found
    5) Add Style to beautify UI
    6) DO NOT use a third-party UI library

- id: task-11
  date: 2024-11-29
  level: challenging
  description: |
    1) Add a component in components/HeaderUserMenu.vue:
       - If not logged in, display a button (.header-go-login) that navigates to /login
       - If logged in, display the username (.header-username) on the right side of the site header
    2) If user is logged in, when the .header-username is hovered, show a dropdown menu with:
       - A button (.header-logout-btn) for logging out
       - A button (.header-go-user-profile) for navigating to the current user's profile page
    3) Add Style to beautify UI
    4) DO NOT use a third-party UI library

- id: task-12
  date: 2024-11-29
  level: challenging
  description: |
    1) Add Recharge Button (.recharge-button) in Profile page
    2) Button is only visible when the user of the profile is current user
    3) When Recharge Button clicked, recharge 1000 coin
    4) Add Style to beautify UI
    5) DO NOT use a third-party UI library
    6) Keep profile page STATIC

- id: task-13
  date: 2024-11-29
  level: challenging
  description: |
    1) Create Admin Portal for admin role with routes '/admin/products' and '/admin/users'
    2) Every products and users are wrapped in table row with IDs #admin_product_{product_id} and #admin_user_{username} respectively
    3) Display the full information of products and users in table rows
    4) In Home page, add .home-go-product-portal-link and .home-go-user-portal-link to navigate to respective portals
    5) For any route inside /admin, Redirect to /login if no privilege
    6) Add Style to beautify UI

- id: task-14
  date: 2024-12-01
  level: challenging
  description: |
    1) Implement Wishlist feature where users can add products to their wishlist using button (.add-to-wishlist) in the product detail page
    2) Create a separate Wishlist page at route '/wishlist' displaying all products the user has added
    3) Structure wishlist items as <div className='wishlist-item' id='wishlist_item_{product_id}'><img className='wishlist-image' src='/'/><div className='wishlist-name'></div><div className='wishlist-price'></div></div>
    4) Add functionality to remove items from wishlist with button (.remove-from-wishlist)
    5) Store wishlist items in the database
    6) Add button (.home-go-wish-list) in home page to navigate to '/wishlist'
    7) Create assets/css/wishlist.css to beautify the Wishlist UI
    8) DO NOT use a third-party UI library

- id: task-15
  date: 2024-11-29
  level: challenging
  description: |
    1) In components/Cart.vue, create an appealing cart button .cart-button that shows the number of items in the cart
    2) When clicked, it shows a popover of all items in the cart
    3) Wrap Product Title, image, quantity (.cart-item-quantity), remove button (.cart-item-remove) in #cart_item_{product_id}
    4) In the Detail Page, add an .add-to-cart-button
    5) When clicked, add this product to the cart
    6) Store Cart Info in the DB for the current User
    7) Place Shopping Cart which can be seen in every page in the right-bottom of page
    8) Add Style to beautify UI
    9) DO NOT use a third-party UI library

- id: task-16
  date: 2024-12-01
  level: challenging
  description: |
    1) Add a button .place-order-in-cart in the Popover of Shopping Cart
    2) When clicked, create an order with 'Pending payment' status without paying or decreasing product quantity
    3) When Order created, redirect to /order/:order-id
    4) When Order created, clear Cart
    5) Add .header-go-to-my-orders to the dropdown in HeaderUserMenu.vue, when clicked, go to the Orders Page of the current user
    6) Each order in my orders page should be displayed with id, status total price inside #my_order_${order_id}
    7) Clicking on an order should jump to the order detail page at /order/:order-id
    8) In /order/:order-id, display the product title, images, price in tr#product_in_order_${product_id}, display the order price and order status
    9) Add Style to beautify UI
    10) DO NOT use a third-party UI library

- id: task-17
  date: 2024-11-29
  level: challenging
  description: |
    1) Add the .pay-my-order button to /order/:order-id
    2) Button is visible when the status is 'Pending payment'
    3) When .pay-my-order is clicked:
       - The status of the order becomes 'Finished'
       - The Coin is paid from current user
       - Decrease product quantity
    4) If payment fails, update the order status to 'Failed'
    5) Add Style to beautify UI
    6) DO NOT use a third-party UI library

- id: task-18
  date: 2024-11-30
  level: challenging
  description: |
    1) Add a .refund-button in Order Detail Page when order is paid
    2) When .refund-button is clicked, change the order status to 'Refund Reviewing'
    3) Create /admin/orders for admin to manage all orders, with a unique identifier #admin_order_{order_id}
    4) Add a .pass-refund-review-button in #admin_order_{order_id} if the order is under 'Refund Reviewing'
    5) When .pass-refund-review-button is clicked:
       - Update the order status to 'Refund Passed'
       - Ensure that the Coin is refunded to the user's account
    6) In Home page, add .home-go-order-portal-link to navigate to /admin/orders
    7) Add Style to beautify UI
    8) DO NOT use a third-party UI library

- id: task-19
  date: 2024-12-01
  level: challenging
  description: |
    1) Implement a Comment and Rating System where users can leave feedback on products only after completing a payment transaction
    2) Store comments in DB
    3) On the product detail page, display the average rating of the product at the top, using classNames:
       - .product-average-rating (with number inside)
    4) When a user has purchased the product, display a form on the product page with classNames:
       - .comment-form
       - .rate-input with five stars inside: (.rate-1-star, .rate-2-star, ... , .rate-5-star)
       - .comment-textarea
       - .comment-submit-button
    5) Display all comments in a list on the product page, with each comment showing:
       - The username
       - The rating
       - The comment text
    6) Style using classNames:
       - .comment-item
       - .comment-username
       - .comment-rating(with number inside)
       - .comment-text
    7) Every User can ONLY comment a product for one time
    8) Add Style to beautify UI
    9) DO NOT use a third-party UI library

- id: task-20
  date: 2024-12-01
  level: challenging
  description: |
    1) Implement an invitation system where current users can view their unique .referral-code (with pure referral-code as innerText) on their profile page
    2) Explain the invitation rule under .referral-code: 'When a new user registers through your referral code, you will earn $888, and an additional $1888 when they pay for their first order.'
    3) The system should automatically credit the referring user with reward by this rule
    4) On the register page, add a .referral-code-input field allowing new users to input the referral code during registration
    5) Add Style to beautify UI
    6) DO NOT use a third-party library
